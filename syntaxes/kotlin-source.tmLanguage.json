{
    "fileTypes": [
        "kt",
        "kts"
    ],
    "scopeName": "electris.source.kotlin",
    "patterns": [
        {
            "precedenceGroup": "comments",
            "patterns": [
                { "include": "#single-line-comment" },
                { "include": "#multi-line-comment" }
            ]
        },
        {
            "precedenceGroup": "builtin-keywords",
            "patterns": [
                { "include": "#builtin-type" },
                { "include": "#keyword" },
                { "include": "#keyword-soft" }
            ]
        },
        {
            "precedenceGroup": "extraction-operators",
            "patterns": [
                { "include": "#extract-operator-dollar" }
            ]
        },
        {
            "precedenceGroup": "literals",
            "patterns": [
                { "include": "#literal-keyword" },
                { "include": "#literal-number" },
                { "include": "#literal-string" },
                { "include": "#constant-literal" }
            ]
        },
        {
            "precedenceGroup": "type-references",
            "patterns": [
                { "include": "#type-definition" },
                { "include": "#type-reference-generic" },
                { "include": "#type-reference" },
                { "include": "#type-args-list" }
            ]
        },
        {
            "precedenceGroup": "function-calls",
            "patterns": [
                { "include": "#function-call" }
            ]
        },
        {
            "precedenceGroup": "rest",
            "patterns": [
                { "include": "#variable-reference" },
                { "include": "#annotation" },
                { "include": "#scope-punctuation" },
                { "include": "#index-punctuation" },
                { "include": "#expression-punctuation" },
                { "include": "#operator-symbols" }
            ]
        }
    ],
    "repository": {
        "variable-reference": {
            "name": "electris.source-code.variable",
            "match": "_*[a-zA-Z0-9][_a-zA-Z0-9]*|(_|__|___|____)(?![_A-Z])"
        },

        "single-line-comment": {
            "name": "electris.source-code.comment",
            "match": "//.*"
        },
        "multi-line-comment": {
            "name": "electris.source-code.comment",
            "begin": "/\\*",
            "end": "\\*/",
            "patterns": [{ "include": "#multi-line-comment" }]
        },

        "keyword": {
            "name": "electris.source-code.operator",
            "match": "(as|as\\?|break|class|continue|do|else|for|fun|if|in|!in|interface|is|!is|object|package|return|super|this|throw|try|typealias|typeof|val|var|when|while)(?![_a-zA-Z0-9])"
        },
        "keyword-soft": {
            "patterns": [
                { "include": "#keyword-soft-surrounded-by-words" },
                { "include": "#keyword-soft-function-like" },
                { "include": "#keyword-soft-block-like" },
                { "include": "#keyword-soft-type-like" },
                { "include": "#keyword-soft-getter-setter" },
                { "include": "#keyword-soft-packaging" },
                { "include": "#keyword-soft-but-treated-hard" },
                { "include": "#keyword-soft-modifier" }
            ]
        },
        "keyword-soft-surrounded-by-words": {
            "name": "electris.source-code.operator",
            "match": "(?<=[_a-zA-Z0-9]+\\s+)by(?=\\s+[_a-zA-Z0-9]+|\\s*$)(?!\\s+by)"
        },
        "keyword-soft-function-like": {
            "name": "electris.source-code.operator",
            "match": "(catch|constructor|get|set)(?=\\s*\\()"
        },
        "keyword-soft-block-like": {
            "name": "electris.source-code.operator",
            "match": "(init)(?=\\s*\\{)"
        },
        "keyword-soft-type-like": {
            "name": "electris.source-code.operator",
            "match": "(?<=:\\s*)dynamic"
        },
        "keyword-soft-getter-setter": {
            "name": "electris.source-code.operator",
            "match": "(?<=(private|public|protected|internal|@[_a-zA-Z0-9.]*)\\s+)(get|set)"
        },
        "keyword-soft-packaging": {
            "name": "electris.source-code.operator",
            "match": "(import|package)(?=\\s+[_a-zA-Z.]+)"
        },
        "keyword-soft-but-treated-hard": {
            "name": "electris.source-code.operator",
            "match": "(finally|where|it|field)(?![_a-zA-Z0-9])"
        },
        "keyword-soft-modifier": {
            "name": "electris.source-code.operator",
            "match": "(abstract|actual|annotation|companion|const|crossinline|data|enum|expect|external|final|infix|inline|inner|internal|lateinit|noinline|open|operator|out|override|private|protected|public|reified|sealed|suspend|tailrec|value|vararg)(?=[_a-zA-Z0-9\\s]*\\s+(class|fun|constructor|var|val|object|[_a-zA-Z0-9]+[:,)>]))(?![_a-zA-Z0-9])"
        },

        "literal-string": {
            "patterns": [
                { "include": "#literal-string-tdquote" },
                { "include": "#literal-string-dquote" },
                { "include": "#literal-string-squote" }
            ]
        },
        "literal-string-dquote": {
            "name": "electris.source-code.primitive-literal",
            "begin": "(?<!(?<!\\\\)\\\\)\"",
            "end": "(?<!(?<!\\\\)\\\\)\"",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            },
            "patterns": [
                { "include": "#extract-operator-dollar" },
                { "include": "#literal-string-escape" }
            ]
        },
        "literal-string-squote": {
            "name": "electris.source-code.primitive-literal",
            "begin": "(?<!(?<!\\\\)\\\\)'",
            "end": "(?<!(?<!\\\\)\\\\)'",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            },
            "patterns": [
                { "include": "#extract-operator-dollar" },
                { "include": "#literal-string-escape" }
            ]
        },
        "literal-string-tdquote": {
            "name": "electris.source-code.primitive-literal",
            "begin": "(?<!(?<!\\\\)\\\\)\"\"\"",
            "end": "(?<!(?<!\\\\)\\\\)\"\"\"",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            },
            "patterns": [
                { "include": "#extract-operator-dollar" }
            ]
        },

        "literal-keyword": {
            "name": "electris.source-code.primitive-literal",
            "match": "(true|false|null|R)(?![_a-zA-Z0-9])"
        },
        "literal-string-escape": {
            "name": "electris.source-code.escape",
            "match": "\\\\."
        },
        "constant-literal": {
            "name": "electris.source-code.primitive-literal",
            "match": "_*[A-Z][_A-Z][_A-Z0-9]*(?![_a-zA-Z0-9])"
        },

        "literal-number": {
            "name": "electris.source-code.primitive-literal",
            "match": "0[xX][0-9a-fA-F_]*(?<!_)|(?!_)[0-9_]+(?<!_)(\\.(?!_)[0-9_]*(?<!_))?([eE][+-]?(?!_)[0-9_]*(?<!_))?|\\.(?!_)[0-9_]+(?<!_)([eE][+-]?(?!_)[0-9_]*(?<!_))?"
        },

        "annotation": {
            "name": "electris.source-code.operator",
            "match": "@[_a-zA-Z0-9.]*"
        },

        "operator-symbols": {
            "name": "electris.source-code.operator",
            "match": "\\+|\\-|\\*|/|%|=|\\+=|\\-=|\\*=|/=|%=|\\+\\+|\\-\\-|&&|\\|\\||!|==|!=|===|!===|<|>|<=|>=|!!|\\?:|\\?"
        },
        "extract-operator-dollar": {
            "patterns": [
                { "include": "#extract-operator-dollar-expression" },
                { "include": "#extract-operator-dollar-variable" }
            ]
        },
        "extract-operator-dollar-variable": {
            "name": "electris.source-code.operator",
            "match": "\\$([_a-zA-Z0-9]+)",
            "captures": {
                "1": { "name": "electris.source-code.variable" }
            }
        },
        "extract-operator-dollar-expression": {
            "begin": "(\\$\\{)",
            "end": "(\\})",
            "beginCaptures": { 
                "1": { "name": "electris.source-code.operator" }
            },
            "endCaptures": { 
                "1": { "name": "electris.source-code.operator" }
            },
            "patterns": [{ "include": "$self" }]
        },

        "scope-punctuation": {
            "name": "electris.source-code.punctuation",
            "match": "\\{|\\}|->"
        },
        "index-punctuation": {
            "name": "electris.source-code.punctuation",
            "match": "\\[|\\]"
        },
        "expression-punctuation": {
            "name": "electris.source-code.punctuation",
            "match": "\\.|,|:|;|\\(|\\)"
        },

        "type-definition": {
            "name": "electris.source-code.types.type",
            "begin": "(?<=[_)a-zA-Z0-9]\\s*:\\s*)(?!\\.)(?=[_a-zA-Z0-9.]+)",
            "end": "(?=[,=(){}:])|(?<=\\?)|$|(?=(as|as\\?|break|by|class|continue|do|else|for|fun|if|in|!in|interface|is|!is|object|package|return|super|this|throw|try|typealias|typeof|val|var|when|while)(?![_a-zA-Z0-9]))",
            "patterns": [
                { "include": "#type-args-list" }
            ]
        },
        "type-reference": {
            "name": "electris.source-code.types.type",
            "match": "_*[A-Z][_a-zA-Z0-9]*(\\?(?!\\.))?(?<!\\s*\\()"
        },
        "type-reference-generic": {
            "name": "electris.source-code.types.type",
            "begin": "_*[A-Z][_a-zA-Z0-9]*[_a-zA-Z0-9]*(?=<)",
            "end": "(?<=>)(\\?(?!\\.))?(?<!\\s*\\()",
            "patterns": [{ "include": "#type-args-list" }]
        },

        "type-args-list": {
            "name": "electris.source-code.types.type-args",
            "begin": "(?<=[_a-zA-Z0-9]<*)<|<(?=<*[_a-zA-Z0-9])",
            "end": ">",
            "patterns": [
                { "include": "#type-args-list" },
                { "include": "#type-args-opers" }
            ]
        },
        "type-args-opers": {
            "match": "(\\*|reified)",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            }
        },

        "function-call": {
            "name": "electris.source-code.function-call",
            "match": "[_a-zA-Z0-9]+(?=\\s*?[!?]?(<.*>)?\\s*(\\(|\\{))"
        }
    }
}