{
    "fileTypes": [
        "dart"
    ],
    "scopeName": "electris.source.dart",
    "patterns": [
        {
            "include": "#typeAfterKeywordContext"
        },
        {
            "include": "#typeAnnotationContext"
        },
        {
            "include": "#typeParameterContext"
        },
        {
            "include": "#defaultContext"
        }
    ],
    "repository": {
        "typeAfterKeywordContext": {
            "name": "debugName.dart.typeAfterKeywordContext",
            "patterns": [
                {
                    "include": "#typeParameterKeyword"
                },
                {
                    "include": "#genericList"
                },
                {
                    "include": "#nullableOperator"
                },
                {
                    "include": "#functionType"
                },
                {
                    "include": "#recordListTop"
                },
                {
                    "include": "#typeIdentifier"
                },
                {
                    "include": "#comments"
                },
                {
                    "include": "#keyword"
                },
                {
                    "include": "#literalNumber"
                },
                {
                    "include": "#literalString"
                },
                {
                    "include": "#literalKeyword"
                },
                {
                    "include": "#variableConst"
                },
                {
                    "include": "#builtinType"
                },
                {
                    "include": "#variableType"
                },
                {
                    "include": "#simpleOperation"
                },
                {
                    "include": "#conditionalOperation"
                },
                {
                    "include": "#mapLiteralPunctuation"
                },
                {
                    "include": "#functionCall"
                },
                {
                    "include": "#functionCallArgumentList"
                },
                {
                    "include": "#annotation"
                },
                {
                    "include": "#organizationalPunctuation"
                },
                {
                    "include": "#variablePlain"
                }
            ],
            "begin": "((?<=((?<=[^a-zA-Z0-9_$]|^)class([^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)mixin([^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)extension\\s+type([^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)extends([^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)implements([^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)with([^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)typedef([^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)is([^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)as([^a-zA-Z0-9_$]|$)))|(?<=((?<=[^a-zA-Z0-9_$]|^)typedef([^a-zA-Z0-9_$]|$)).*=))",
            "end": "(?!(?<=\\s+|(((?<=[^a-zA-Z0-9_$]|^)class([^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)mixin([^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)extension\\s+type([^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)extends([^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)implements([^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)with([^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)typedef([^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)is([^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)as([^a-zA-Z0-9_$]|$)))|=))"
        },
        "typeAnnotationContext": {
            "name": "debugName.dart.typeAnnotationContext",
            "patterns": [
                {
                    "include": "#typeParameterKeyword"
                },
                {
                    "include": "#genericList"
                },
                {
                    "include": "#nullableOperator"
                },
                {
                    "include": "#functionType"
                },
                {
                    "include": "#recordListTop"
                },
                {
                    "include": "#typeIdentifier"
                },
                {
                    "include": "#comments"
                },
                {
                    "include": "#keyword"
                },
                {
                    "include": "#literalNumber"
                },
                {
                    "include": "#literalString"
                },
                {
                    "include": "#literalKeyword"
                },
                {
                    "include": "#variableConst"
                },
                {
                    "include": "#builtinType"
                },
                {
                    "include": "#variableType"
                },
                {
                    "include": "#simpleOperation"
                },
                {
                    "include": "#conditionalOperation"
                },
                {
                    "include": "#mapLiteralPunctuation"
                },
                {
                    "include": "#functionCall"
                },
                {
                    "include": "#functionCallArgumentList"
                },
                {
                    "include": "#annotation"
                },
                {
                    "include": "#organizationalPunctuation"
                },
                {
                    "include": "#variablePlain"
                }
            ],
            "begin": "(((^(?!(\\([^\"'\\^&|=]*\\)).*(=>|\\{)))|(?<=(((?<=[^a-zA-Z0-9_$]|^)var([^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)final([^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)const([^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)dynamic([^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)covariant([^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)static([^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)required([^a-zA-Z0-9_$]|$)))|\\(|,|\\[|\\{))(?=\\s*((([.]|([a-zA-Z_$0-9]))+((<(?=([^+\\-*\\/\\^|&~=]*>)|([^+\\-*\\/\\^|&~=]+\\s*$))).*>)?)|(\\([^\"'\\^&|=]*\\)))\\??\\s+(?!(?!((?<=[^a-zA-Z0-9_$]|^)get(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)set(?=[^a-zA-Z0-9_$]|$)))((((?<=[^a-zA-Z0-9_$]|^)class(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)extends(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)with(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)super(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)is(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)as(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)enum(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)var(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)const(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)final(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)if(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)else(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)for(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)in(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)while(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)continue(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)break(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)do(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)switch(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)case(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)default(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)try(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)catch(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)finally(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)throw(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)rethrow(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)assert(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)this(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)new(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)return(?=[^a-zA-Z0-9_$]|$)))|(((?<=[^a-zA-Z0-9_$]|^)import(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)export(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)library(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)hide(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)show(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)deferred(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)part\\s+of(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)part(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)abstract(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)interface(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)implements(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)mixin(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)base(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)sealed(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)typedef(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)dynamic(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)static(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)covariant(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)late(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)extension\\s+type(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)extension(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)when(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)on(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)async(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)await(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)sync(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)get(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)set(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)yield(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)external(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)required(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)factory(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)macro(?=[^a-zA-Z0-9_$]|$)))|((?<=[^a-zA-Z0-9_$]|^)operator(?=[^a-zA-Z0-9_$]|$))))([a-zA-Z_$0-9]))(?!\\s*((((?<=[^a-zA-Z0-9_$]|^)class(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)extends(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)with(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)super(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)is(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)as(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)enum(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)var(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)const(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)final(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)if(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)else(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)for(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)in(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)while(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)continue(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)break(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)do(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)switch(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)case(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)default(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)try(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)catch(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)finally(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)throw(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)rethrow(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)assert(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)this(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)new(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)return(?=[^a-zA-Z0-9_$]|$)))|(((?<=[^a-zA-Z0-9_$]|^)import(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)export(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)library(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)hide(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)show(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)deferred(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)part\\s+of(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)part(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)abstract(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)interface(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)implements(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)mixin(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)base(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)sealed(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)typedef(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)dynamic(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)static(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)covariant(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)late(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)extension\\s+type(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)extension(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)when(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)on(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)async(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)await(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)sync(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)get(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)set(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)yield(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)external(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)required(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)factory(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)macro(?=[^a-zA-Z0-9_$]|$)))|((?<=[^a-zA-Z0-9_$]|^)operator(?=[^a-zA-Z0-9_$]|$)))))",
            "end": "((?=\\s+)(?<=([.]|([a-zA-Z_$0-9]))+|>|\\?|\\))(?!\\s*(((([.]|([a-zA-Z_$0-9]))+|>|\\?|\\))\\s+)?((?<=[^a-zA-Z0-9_$]|^)Function(?=[^a-zA-Z0-9_$]|$))(?=\\s*!?\\s*((<(?=([^+\\-*\\/\\^|&~=]*>)|([^+\\-*\\/\\^|&~=]+\\s*$))).*>)?\\s*\\())))"
        },
        "typeParameterContext": {
            "name": "debugName.dart.typeParameterContext",
            "patterns": [
                {
                    "include": "#typeParameterKeyword"
                },
                {
                    "include": "#genericList"
                },
                {
                    "include": "#nullableOperator"
                },
                {
                    "include": "#functionType"
                },
                {
                    "include": "#recordListTop"
                },
                {
                    "include": "#typeIdentifier"
                },
                {
                    "include": "#comments"
                },
                {
                    "include": "#keyword"
                },
                {
                    "include": "#literalNumber"
                },
                {
                    "include": "#literalString"
                },
                {
                    "include": "#literalKeyword"
                },
                {
                    "include": "#variableConst"
                },
                {
                    "include": "#builtinType"
                },
                {
                    "include": "#variableType"
                },
                {
                    "include": "#simpleOperation"
                },
                {
                    "include": "#conditionalOperation"
                },
                {
                    "include": "#mapLiteralPunctuation"
                },
                {
                    "include": "#functionCall"
                },
                {
                    "include": "#functionCallArgumentList"
                },
                {
                    "include": "#annotation"
                },
                {
                    "include": "#organizationalPunctuation"
                },
                {
                    "include": "#variablePlain"
                }
            ],
            "begin": "(((?<=([.]|([a-zA-Z_$0-9]))+\\s*!?)(?=((<(?=([^+\\-*\\/\\^|&~=]*>)|([^+\\-*\\/\\^|&~=]+\\s*$))).*>)|((<(?=([^+\\-*\\/\\^|&~=]*>)|([^+\\-*\\/\\^|&~=]+\\s*$)))\\s*$)))|(?=((<(?=([^+\\-*\\/\\^|&~=]*>)|([^+\\-*\\/\\^|&~=]+\\s*$))).*>)(\\[|\\{|\\()))",
            "end": "(?<=>)"
        },
        "defaultContext": {
            "name": "debugName.dart.defaultContext",
            "patterns": [
                {
                    "include": "#comments"
                },
                {
                    "include": "#keyword"
                },
                {
                    "include": "#literalNumber"
                },
                {
                    "include": "#literalString"
                },
                {
                    "include": "#literalKeyword"
                },
                {
                    "include": "#variableConst"
                },
                {
                    "include": "#builtinType"
                },
                {
                    "include": "#variableType"
                },
                {
                    "include": "#simpleOperation"
                },
                {
                    "include": "#conditionalOperation"
                },
                {
                    "include": "#mapLiteralPunctuation"
                },
                {
                    "include": "#functionCall"
                },
                {
                    "include": "#functionCallArgumentList"
                },
                {
                    "include": "#annotation"
                },
                {
                    "include": "#organizationalPunctuation"
                },
                {
                    "include": "#variablePlain"
                }
            ]
        },
        "typeParameterKeyword": {
            "name": "electris.source-code.operator debugName.dart.typeParameterKeyword",
            "match": "(((?<=[^a-zA-Z0-9_$]|^)dynamic(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)extends(?=[^a-zA-Z0-9_$]|$)))"
        },
        "genericList": {
            "name": "electris.source-code.types.type-recursive debugName.dart.genericList",
            "patterns": [
                {
                    "include": "#recordListNoStyle"
                },
                {
                    "include": "#recursiveTypeParameter"
                }
            ],
            "begin": "(<(?=([^+\\-*\\/\\^|&~=]*>)|([^+\\-*\\/\\^|&~=]+\\s*$)))",
            "end": ">"
        },
        "nullableOperator": {
            "name": "electris.source-code.types.type debugName.dart.nullableOperator",
            "match": "\\?"
        },
        "functionType": {
            "name": "electris.source-code.types.type debugName.dart.functionType",
            "patterns": [
                {
                    "include": "#typeParameterKeyword"
                },
                {
                    "include": "#genericList"
                },
                {
                    "include": "#nullableOperator"
                },
                {
                    "include": "#functionType"
                },
                {
                    "include": "#recordListTop"
                },
                {
                    "include": "#typeIdentifier"
                },
                {
                    "include": "#comments"
                },
                {
                    "include": "#keyword"
                },
                {
                    "include": "#literalNumber"
                },
                {
                    "include": "#literalString"
                },
                {
                    "include": "#literalKeyword"
                },
                {
                    "include": "#variableConst"
                },
                {
                    "include": "#builtinType"
                },
                {
                    "include": "#variableType"
                },
                {
                    "include": "#simpleOperation"
                },
                {
                    "include": "#conditionalOperation"
                },
                {
                    "include": "#mapLiteralPunctuation"
                },
                {
                    "include": "#functionCall"
                },
                {
                    "include": "#functionCallArgumentList"
                },
                {
                    "include": "#annotation"
                },
                {
                    "include": "#organizationalPunctuation"
                },
                {
                    "include": "#variablePlain"
                }
            ],
            "begin": "(((([.]|([a-zA-Z_$0-9]))+|>|\\?|\\))\\s+)?((?<=[^a-zA-Z0-9_$]|^)Function(?=[^a-zA-Z0-9_$]|$))(?=\\s*!?\\s*((<(?=([^+\\-*\\/\\^|&~=]*>)|([^+\\-*\\/\\^|&~=]+\\s*$))).*>)?\\s*\\())",
            "end": "((?<=\\))(?!\\s*((?<=[^a-zA-Z0-9_$]|^)Function(?=[^a-zA-Z0-9_$]|$))))"
        },
        "recordListTop": {
            "name": "electris.source-code.types.type debugName.dart.recordListTop",
            "patterns": [
                {
                    "include": "#recordVariable"
                },
                {
                    "include": "#recursiveTypeParameter"
                }
            ],
            "begin": "\\(",
            "end": "\\)"
        },
        "typeIdentifier": {
            "name": "electris.source-code.types.type debugName.dart.typeIdentifier",
            "match": "([.]|([a-zA-Z_$0-9]))+"
        },
        "comments": {
            "name": "debugName.dart.comments",
            "patterns": [
                {
                    "name": "electris.source-code.documentation debugName.dart.comments.inline1",
                    "match": "(///.*)"
                },
                {
                    "name": "electris.source-code.comment debugName.dart.comments.inline2",
                    "match": "(//.*)"
                },
                {
                    "name": "electris.source-code.comment debugName.dart.comments.inline3",
                    "patterns": [
                        {
                            "include": "#comments"
                        }
                    ],
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "keyword": {
            "name": "electris.source-code.operator debugName.dart.keyword",
            "match": "((((?<=[^a-zA-Z0-9_$]|^)class(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)extends(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)with(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)super(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)is(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)as(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)enum(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)var(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)const(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)final(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)if(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)else(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)for(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)in(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)while(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)continue(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)break(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)do(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)switch(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)case(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)default(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)try(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)catch(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)finally(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)throw(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)rethrow(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)assert(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)this(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)new(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)return(?=[^a-zA-Z0-9_$]|$)))|((((?<=[^a-zA-Z0-9_$]|^)import(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)export(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)library(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)hide(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)show(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)deferred(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)part\\s+of(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)part(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)abstract(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)interface(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)implements(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)mixin(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)base(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)sealed(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)typedef(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)dynamic(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)static(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)covariant(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)late(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)extension\\s+type(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)extension(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)when(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)on(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)async(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)await(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)sync(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)get(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)set(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)yield(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)external(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)required(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)factory(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)macro(?=[^a-zA-Z0-9_$]|$)))(?!(\\s*!?\\s*((<(?=([^+\\-*\\/\\^|&~=]*>)|([^+\\-*\\/\\^|&~=]+\\s*$))).*>)?\\s*\\()(?!.*\\)\\s*([a-zA-Z_$0-9])+)))|(((?<=[^a-zA-Z0-9_$]|^)operator(?=[^a-zA-Z0-9_$]|$))\\s*((((>|>=|<|<=|==|\\+|\\-|\\*|/|~/|%|<<|>>|>>>|\\^|&|\\||~|\\[\\]|\\[\\]=)(?=(\\s*!?\\s*((<(?=([^+\\-*\\/\\^|&~=]*>)|([^+\\-*\\/\\^|&~=]+\\s*$))).*>)?\\s*\\()|\\s*$)))|(([^(\\s]*|$)))))",
            "captures": {
                "77": {
                    "name": "electris.source-code.function-call debugName.dart.keyword.captures[77]"
                },
                "85": {
                    "name": "electris.source-code.escape debugName.dart.keyword.captures[85]"
                }
            }
        },
        "literalNumber": {
            "name": "electris.source-code.primitive-literal debugName.dart.literalNumber",
            "match": "((0[xX]([0-9a-fA-F])*)|([0-9]+(\\.[0-9]+)?([eE][+\\-]?[0-9]+)?)|((\\.[0-9]+)([eE][+\\-]?[0-9]+)?))"
        },
        "literalString": {
            "name": "electris.source-code.primitive-literal debugName.dart.literalString",
            "patterns": [
                {
                    "name": "electris.source-code.primitive-literal debugName.dart.literalString.inline1",
                    "patterns": [
                        {
                            "include": "#literalStringInterpOper"
                        },
                        {
                            "include": "#literalStringEscapeSequence"
                        }
                    ],
                    "begin": "\"",
                    "end": "(\"|$)"
                },
                {
                    "name": "electris.source-code.primitive-literal debugName.dart.literalString.inline2",
                    "patterns": [
                        {
                            "include": "#literalStringInterpOper"
                        },
                        {
                            "include": "#literalStringEscapeSequence"
                        }
                    ],
                    "begin": "'",
                    "end": "('|$)"
                },
                {
                    "name": "electris.source-code.primitive-literal debugName.dart.literalString.inline3",
                    "patterns": [
                        {
                            "include": "#literalStringInterpOper"
                        },
                        {
                            "include": "#literalStringEscapeSequence"
                        }
                    ],
                    "begin": "\"\"\"",
                    "end": "\"\"\""
                },
                {
                    "name": "electris.source-code.primitive-literal debugName.dart.literalString.inline4",
                    "patterns": [
                        {
                            "include": "#literalStringInterpOper"
                        },
                        {
                            "include": "#literalStringEscapeSequence"
                        }
                    ],
                    "begin": "'''",
                    "end": "'''"
                },
                {
                    "name": "electris.source-code.primitive-literal debugName.dart.literalString.inline5",
                    "begin": "(r\")",
                    "end": "(\"|$)"
                },
                {
                    "name": "electris.source-code.primitive-literal debugName.dart.literalString.inline6",
                    "begin": "(r')",
                    "end": "('|$)"
                },
                {
                    "name": "electris.source-code.primitive-literal debugName.dart.literalString.inline7",
                    "begin": "(r\"\"\")",
                    "end": "\"\"\""
                },
                {
                    "name": "electris.source-code.primitive-literal debugName.dart.literalString.inline8",
                    "begin": "(r''')",
                    "end": "'''"
                }
            ]
        },
        "literalKeyword": {
            "name": "electris.source-code.primitive-literal debugName.dart.literalKeyword",
            "match": "(((?<=[^a-zA-Z0-9_$]|^)true(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)false(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)null(?=[^a-zA-Z0-9_$]|$)))"
        },
        "variableConst": {
            "name": "electris.source-code.primitive-literal debugName.dart.variableConst",
            "match": "((([_$0-9])*[A-Z]){2,}([A-Z_$0-9])*(?![a-zA-Z_$0-9]))"
        },
        "builtinType": {
            "name": "electris.source-code.types.type debugName.dart.builtinType",
            "match": "(((?<=[^a-zA-Z0-9_$]|^)num(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)int(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)double(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)bool(?=[^a-zA-Z0-9_$]|$))|((?<=[^a-zA-Z0-9_$]|^)void(?=[^a-zA-Z0-9_$]|$)))"
        },
        "variableType": {
            "name": "electris.source-code.types.type debugName.dart.variableType",
            "match": "(([_$0-9])*[A-Z]([a-zA-Z_$0-9])*)"
        },
        "simpleOperation": {
            "name": "electris.source-code.operator debugName.dart.simpleOperation",
            "match": "(\\+\\+|\\-\\-|\\+|\\-|\\*|/|~/|%|!|<<|>>|>>>|&|\\||\\^|~|=|\\?\\?=|\\+=|\\-=|\\*=|/=|~/=|%=|<<=|>>=|>>>=|&=|\\|=|\\^=|~=|>|>=|<|<=|==|!=|\\?\\?|(\\?(?=\\.))|#|\\.\\.\\.|=>)"
        },
        "conditionalOperation": {
            "name": "debugName.dart.conditionalOperation",
            "patterns": [
                {
                    "include": "$self"
                }
            ],
            "begin": "(\\?)",
            "end": "(:)",
            "beginCaptures": {
                "1": {
                    "name": "electris.source-code.operator debugName.dart.conditionalOperation.beginCaptures[1]"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "electris.source-code.operator debugName.dart.conditionalOperation.endCaptures[1]"
                }
            }
        },
        "mapLiteralPunctuation": {
            "name": "debugName.dart.mapLiteralPunctuation",
            "patterns": [
                {
                    "include": "#organizationalPunctuation"
                },
                {
                    "include": "$self"
                }
            ],
            "begin": "\\{",
            "end": "\\}",
            "beginCaptures": {
                "0": {
                    "name": "electris.source-code.punctuation debugName.dart.mapLiteralPunctuation.beginCaptures[0]"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "electris.source-code.punctuation debugName.dart.mapLiteralPunctuation.endCaptures[0]"
                }
            }
        },
        "functionCall": {
            "name": "debugName.dart.functionCall",
            "patterns": [
                {
                    "include": "$self"
                }
            ],
            "begin": "((([a-zA-Z_$0-9])+)(?=(\\s*!?\\s*((<(?=([^+\\-*\\/\\^|&~=]*>)|([^+\\-*\\/\\^|&~=]+\\s*$))).*>)?\\s*\\()|((<(?=([^+\\-*\\/\\^|&~=]*>)|([^+\\-*\\/\\^|&~=]+\\s*$)))\\s*$)|(<(?=([^+\\-*\\/\\^|&~=]*>)|([^+\\-*\\/\\^|&~=]+\\s*$)))))",
            "end": "(?<=\\))",
            "beginCaptures": {
                "2": {
                    "name": "electris.source-code.function-call debugName.dart.functionCall.beginCaptures[2]"
                }
            }
        },
        "functionCallArgumentList": {
            "name": "debugName.dart.functionCallArgumentList",
            "patterns": [
                {
                    "include": "$self"
                }
            ],
            "begin": "\\(",
            "end": "\\)",
            "beginCaptures": {
                "0": {
                    "name": "electris.source-code.punctuation debugName.dart.functionCallArgumentList.beginCaptures[0]"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "electris.source-code.punctuation debugName.dart.functionCallArgumentList.endCaptures[0]"
                }
            }
        },
        "annotation": {
            "name": "electris.source-code.operator debugName.dart.annotation",
            "match": "(@([.]|([a-zA-Z_$0-9]))*)"
        },
        "organizationalPunctuation": {
            "name": "electris.source-code.punctuation debugName.dart.organizationalPunctuation",
            "match": "(\\)|\\[|\\]|\\{|\\}|:|,|;|\\.)"
        },
        "variablePlain": {
            "name": "electris.source-code.variable debugName.dart.variablePlain",
            "match": "([a-zA-Z_$0-9])+"
        },
        "recordListNoStyle": {
            "name": "debugName.dart.recordListNoStyle",
            "patterns": [
                {
                    "include": "#recordVariable"
                },
                {
                    "include": "#recursiveTypeParameter"
                }
            ],
            "begin": "\\(",
            "end": "\\)"
        },
        "recursiveTypeParameter": {
            "name": "debugName.dart.recursiveTypeParameter",
            "patterns": [
                {
                    "include": "#typeParameterKeyword"
                },
                {
                    "include": "#genericList"
                },
                {
                    "include": "#recordListRecursive"
                }
            ]
        },
        "recordVariable": {
            "name": "electris.source-code.variable debugName.dart.recordVariable",
            "match": "((?<=([.]|([a-zA-Z_$0-9]))+\\s+)([a-zA-Z_$0-9])+)"
        },
        "literalStringInterpOper": {
            "name": "debugName.dart.literalStringInterpOper",
            "patterns": [
                {
                    "name": "debugName.dart.literalStringInterpOper.inline1",
                    "patterns": [
                        {
                            "include": "#comments"
                        },
                        {
                            "include": "#keyword"
                        },
                        {
                            "include": "#literalNumber"
                        },
                        {
                            "include": "#literalString"
                        },
                        {
                            "include": "#literalKeyword"
                        },
                        {
                            "include": "#variableConst"
                        },
                        {
                            "include": "#builtinType"
                        },
                        {
                            "include": "#variableType"
                        },
                        {
                            "include": "#simpleOperation"
                        },
                        {
                            "include": "#conditionalOperation"
                        },
                        {
                            "include": "#mapLiteralPunctuation"
                        },
                        {
                            "include": "#functionCall"
                        },
                        {
                            "include": "#functionCallArgumentList"
                        },
                        {
                            "include": "#annotation"
                        },
                        {
                            "include": "#organizationalPunctuation"
                        },
                        {
                            "include": "#variablePlain"
                        }
                    ],
                    "begin": "(\\$\\{)",
                    "end": "(\\})",
                    "beginCaptures": {
                        "1": {
                            "name": "electris.source-code.operator debugName.dart.literalStringInterpOper.inline1.beginCaptures[1]"
                        }
                    },
                    "endCaptures": {
                        "1": {
                            "name": "electris.source-code.operator debugName.dart.literalStringInterpOper.inline1.endCaptures[1]"
                        }
                    }
                },
                {
                    "name": "electris.source-code.operator debugName.dart.literalStringInterpOper.inline2",
                    "patterns": [
                        {
                            "name": "electris.source-code.variable debugName.dart.literalStringInterpOper.inline2.inline1",
                            "match": "([a-zA-Z_0-9])+"
                        }
                    ],
                    "begin": "\\$",
                    "end": "(?!([a-zA-Z_0-9])+)"
                }
            ]
        },
        "literalStringEscapeSequence": {
            "name": "electris.source-code.escape debugName.dart.literalStringEscapeSequence",
            "match": "((\\\\x([0-9a-fA-F]){,2})|(\\\\u\\{([0-9a-fA-F])*\\})|(\\\\u([0-9a-fA-F]){,4})|(\\\\.?))"
        },
        "recordListRecursive": {
            "name": "electris.source-code.types.type-recursive debugName.dart.recordListRecursive",
            "patterns": [
                {
                    "include": "#recordVariable"
                },
                {
                    "include": "#recursiveTypeParameter"
                }
            ],
            "begin": "\\(",
            "end": "\\)"
        }
    }
}
