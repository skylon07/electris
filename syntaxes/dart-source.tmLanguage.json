{
    "fileTypes": [
        "dart"
    ],
    "scopeName": "electris.source.dart",
    "patterns": [
        {
            "precedenceGroup": "parentheses-for-functions-that-arent-record-types",
            "patterns": [
                { "include": "#expression-punctuation-parentheses-not-record" }
            ]
        },
        { "include": "#self-no-parentheses-for-functions-that-arent-record-types" }
    ],
    "repository": {
        "self-no-parentheses-for-functions-that-arent-record-types": {
            "patterns": [
                {
                    "precedenceGroup": "comments",
                    "patterns": [
                        { "include": "#single-line-doc-comment" },
                        { "include": "#single-line-comment" },
                        { "include": "#multi-line-comment" }
                    ]
                },
                {
                    "precedenceGroup": "builtin-keywords",
                    "patterns": [
                        { "include": "#builtin-type" },
                        { "include": "#keyword" },
                        { "include": "#keyword-operator" }
                    ]
                },
                {
                    "precedenceGroup": "literals",
                    "patterns": [
                        { "include": "#literal-keyword" },
                        { "include": "#literal-number" },
                        { "include": "#literal-string" },
                        { "include": "#constant-literal" }
                    ]
                },
                {
                    "precedenceGroup": "type-references",
                    "patterns": [
                        { "include": "#type-definition-generic-in-class-headers" },
                        { "include": "#type-definition-in-class-headers" },
                        { "include": "#type-definition-generic" },
                        { "include": "#type-definition-record" },
                        { "include": "#type-definition" },
                        { "include": "#type-reference-generic" },
                        { "include": "#type-reference" },
                        { "include": "#type-args-list-single-line" }
                    ]
                },
                {
                    "precedenceGroup": "function-calls",
                    "patterns": [
                        { "include": "#function-call" },
                        { "include": "#function-call-generic" }
                    ]
                },
                {
                    "precedenceGroup": "rest",
                    "patterns": [
                        { "include": "#spread-operator" },
                        { "include": "#cascade-chain" },
                        { "include": "#variable-reference" },
                        { "include": "#math-operator" },
                        { "include": "#symbol-operator" },
                        { "include": "#lambda-operator" },
                        { "include": "#case-punctuation" },
                        { "include": "#condition-operator" },
                        { "include": "#condition-operator-ternary" },
                        { "include": "#assignment-operator" },
                        { "include": "#annotation" },
                        { "include": "#scope-punctuation" },
                        { "include": "#scope-punctuation-leftover" },
                        { "include": "#index-punctuation" },
                        { "include": "#expression-punctuation" }
                    ]
                }
            ]
        },

        "cascade-chain": {
            "name": "electris.source-code.variable",
            "match": "\\.\\."
        },
        "variable-reference": {
            "name": "electris.source-code.variable",
            "match": "_*[a-zA-Z0-9$][_a-zA-Z0-9$]*|(_|__|___|____)(?![_A-Z])"
        },

        "math-operator": {
            "name": "electris.source-code.operator",
            "match": "\\+|\\-|\\+\\+|\\-\\-|\\*|/|~/|%|!|<<|>>|>>>|\\^|&|\\||~"
        },
        "symbol-operator": {
            "name": "electris.source-code.operator",
            "match": "#"
        },
        "spread-operator": {
            "name": "electris.source-code.operator",
            "match": "\\.\\.\\."
        },
        "lambda-operator": {
            "name": "electris.source-code.operator",
            "match": "=>"
        },
        "extract-operator-dollar": {
            "patterns": [
                { "include": "#extract-operator-dollar-expression" },
                { "include": "#extract-operator-dollar-variable" }
            ]
        },
        "extract-operator-dollar-variable": {
            "name": "electris.source-code.operator",
            "match": "(?<!\\.)\\$([_a-zA-Z0-9]*)",
            "captures": {
                "1": { "name": "electris.source-code.variable" }
            }
        },
        "extract-operator-dollar-expression": {
            "begin": "(?<!\\.)(\\$\\{)",
            "end": "(\\})",
            "beginCaptures": { 
                "1": { "name": "electris.source-code.operator" }
            },
            "endCaptures": { 
                "1": { "name": "electris.source-code.operator" }
            },
            "patterns": [
                { "include": "#scope-punctuation" },
                { "include": "$self" }
            ]
        },
        "condition-operator": {
            "name": "electris.source-code.operator",
            "match": ">|>=|<|<=|==|!=|\\?\\?|\\?(?=\\.)"
        },
        "condition-operator-ternary": {
            "name": "electris.source-code.operator",
            "match": "\\?|:"
        },
        "assignment-operator": {
            "name": "electris.source-code.operator",
            "match": "=|\\?\\?=|\\+=|\\-=|\\*=|/=|~/=|%=|<<=|>>=|>>>=|\\^=|&=|\\|=|~="
        },
        "keyword": {
            "name": "electris.source-code.operator",
            "match": "(?<!\\.)(import|export|library|hide|show|deferred|part|class|macro|extends|abstract|interface|implements|mixin|base|sealed|with|super|is|as|enum|typedef|extension|var|const|final|dynamic|static|covariant|late|if|else|for|in|while|continue|break|do|switch|case|when|default|try|on|catch|finally|throw|rethrow|assert|async|await|sync|this|new|get|set|return|yield|external|required|factory)(?![_a-zA-Z0-9$])"
        },
        "keyword-operator": {
            "name": "electris.source-code.operator",
            "match": "operator\\s*(>|>=|<|<=|==|\\+|\\-|\\*|/|~/|%|<<|>>|\\^|&|\\||~|>>>|\\[\\]|\\[\\]=)(?=\\s*\\(|\\s*$)|operator\\s*([^\\(]*)",
            "captures": {
                "2": { "name": "electris.source-code.punctuation" }
            }
        },
        "annotation": {
            "name": "electris.source-code.operator",
            "match": "@[_a-zA-Z0-9$.]*"
        },

        "literal-number": {
            "name": "electris.source-code.primitive-literal",
            "match": "0[xX][0-9a-fA-F]*|[0-9]+(\\.[0-9]*)?(e[0-9]+)?|\\.[0-9]+(e[0-9]+)?"
        },
        "literal-string": {
            "patterns": [
                { "include": "#literal-raw-string-tdquote" },
                { "include": "#literal-raw-string-tsquote" },
                { "include": "#literal-raw-string-dquote" },
                { "include": "#literal-raw-string-squote" },
                { "include": "#literal-string-tdquote" },
                { "include": "#literal-string-tsquote" },
                { "include": "#literal-string-dquote" },
                { "include": "#literal-string-squote" }
            ]
        },
        "literal-string-dquote": {
            "name": "electris.source-code.primitive-literal",
            "begin": "(?<!(?<!\\\\)\\\\)\"",
            "end": "(?<!(?<!\\\\)\\\\)\"",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            },
            "patterns": [
                { "include": "#extract-operator-dollar" },
                { "include": "#literal-string-escape" }
            ]
        },
        "literal-string-squote": {
            "name": "electris.source-code.primitive-literal",
            "begin": "(?<!(?<!\\\\)\\\\)'",
            "end": "(?<!(?<!\\\\)\\\\)'",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            },
            "patterns": [
                { "include": "#extract-operator-dollar" },
                { "include": "#literal-string-escape" }
            ]
        },
        "literal-string-tdquote": {
            "name": "electris.source-code.primitive-literal",
            "begin": "(?<!(?<!\\\\)\\\\)\"\"\"",
            "end": "(?<!(?<!\\\\)\\\\)\"\"\"",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            },
            "patterns": [
                { "include": "#extract-operator-dollar" },
                { "include": "#literal-string-escape" }
            ]
        },
        "literal-string-tsquote": {
            "name": "electris.source-code.primitive-literal",
            "begin": "(?<!(?<!\\\\)\\\\)'''",
            "end": "(?<!(?<!\\\\)\\\\)'''",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            },
            "patterns": [
                { "include": "#extract-operator-dollar" },
                { "include": "#literal-string-escape" }
            ]
        },
        "literal-raw-string-dquote": {
            "name": "electris.source-code.primitive-literal",
            "begin": "(?<!(?<!\\\\)\\\\)r\"",
            "end": "\"",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            }
        },
        "literal-raw-string-squote": {
            "name": "electris.source-code.primitive-literal",
            "begin": "(?<!(?<!\\\\)\\\\)r'",
            "end": "'",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            }
        },
        "literal-raw-string-tdquote": {
            "name": "electris.source-code.primitive-literal",
            "begin": "(?<!(?<!\\\\)\\\\)r\"\"\"",
            "end": "\"\"\"",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            }
        },
        "literal-raw-string-tsquote": {
            "name": "electris.source-code.primitive-literal",
            "begin": "(?<!(?<!\\\\)\\\\)r'''",
            "end": "'''",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            }
        },
        "literal-keyword": {
            "name": "electris.source-code.primitive-literal",
            "match": "(true|false|null)(?![_a-zA-Z0-9$])"
        },
        "literal-string-escape": {
            "name": "electris.source-code.escape",
            "match": "\\\\x[0-9a-fA-F]{0,2}|\\\\u\\{[0-9a-fA-F]*\\}|\\\\u[0-9a-fA-F]{0,4}|\\\\."
        },
        "constant-literal": {
            "name": "electris.source-code.primitive-literal",
            "match": "_*[A-Z][_A-Z][_A-Z0-9]*(?![_a-zA-Z0-9$])"
        },

        "single-line-comment": {
            "name": "electris.source-code.comment",
            "match": "//.*"
        },
        "single-line-doc-comment": {
            "name": "electris.source-code.documentation",
            "match": "///.*"
        },
        "multi-line-comment": {
            "name": "electris.source-code.comment",
            "begin": "/\\*",
            "end": "\\*/",
            "patterns": [{ "include": "#multi-line-comment" }]
        },
        
        "type-definition": {
            "name": "electris.source-code.types.type",
            "match": "(?<=(^|\\(|,)\\s*)[_a-zA-Z0-9$]+[_a-zA-Z0-9$.]*\\??(?=\\s+(?!(import|export|library|hide|show|deferred|part|class|macro|extends|abstract|interface|implements|mixin|base|sealed|with|super|is|as|enum|typedef|extension|var|const|final|dynamic|static|covariant|late|if|else|for|in|while|continue|break|do|switch|case|when|default|try|on|catch|finally|throw|rethrow|assert|async|await|sync|this|new|get|set|return|yield|external|required|factory)(?![_a-zA-Z0-9$]))[_a-zA-Z0-9$]{2})|(?<=\\s+as\\s+)[_a-zA-Z0-9$]+[_a-zA-Z0-9$.]*\\??"
        },
        "type-definition-generic": {
            "name": "electris.source-code.types.type",
            "begin": "(?<=(^|\\(|,)\\s*)[_a-zA-Z0-9$]+[_a-zA-Z0-9$.]*\\??(?=<)(?!\\s*<.*>\\s*\\()|(?<=\\s+as\\s+)[_a-zA-Z0-9$]+[_a-zA-Z0-9$.]*\\??(?=<)",
            "end": "(?<=>)(\\?(?!\\.))?(?<!\\s*\\()|$",
            "patterns": [
                { "include": "#type-args-list" }
            ]
        },
        "type-definition-record": {
            "name": "electris.source-code.types.type",
            "begin": "(?<=(^|\\(|,)\\s*)\\((?=.*\\)\\??\\s*(?!(import|export|library|hide|show|deferred|part|class|macro|extends|abstract|interface|implements|mixin|base|sealed|with|super|is|as|enum|typedef|extension|var|const|final|dynamic|static|covariant|late|if|else|for|in|while|continue|break|do|switch|case|when|default|try|on|catch|finally|throw|rethrow|assert|async|await|sync|this|new|get|set|return|yield|external|required|factory)(?![_a-zA-Z0-9$]))[_a-zA-Z0-9$]+)|(?<=typedef\\s+[_a-zA-Z0-9$]*\\s*=\\s*)\\(|(?<=\\s+as\\s+)\\(",
            "end": "\\)\\??|$",
            "patterns": [
                { "include": "#type-args-list" },
                { "include": "#type-definition-record-variable" },
                { "include": "#type-definition-record-recursive" }
            ]
        },
        "type-definition-record-recursive": {
            "name": "electris.source-code.types.type-args",
            "begin": "(?<=(^|\\(|,)\\s*)\\((?=.*\\)\\??\\s*(?!(import|export|library|hide|show|deferred|part|class|macro|extends|abstract|interface|implements|mixin|base|sealed|with|super|is|as|enum|typedef|extension|var|const|final|dynamic|static|covariant|late|if|else|for|in|while|continue|break|do|switch|case|when|default|try|on|catch|finally|throw|rethrow|assert|async|await|sync|this|new|get|set|return|yield|external|required|factory)(?![_a-zA-Z0-9$]))[_a-zA-Z0-9$]+)|(?<=typedef\\s+[_a-zA-Z0-9$]*\\s*=\\s*)\\(",
            "end": "\\)\\??|$",
            "patterns": [
                { "include": "#type-args-list" },
                { "include": "#type-definition-record-variable" },
                { "include": "#type-definition-record-recursive" }
            ]
        },
        "type-definition-record-variable": {
            "name": "electris.source-code.variable",
            "match": "(?<=[_a-zA-Z0-9$]\\s|\\)|>)\\s*[_a-zA-Z0-9$]+"
        },
        "type-definition-in-class-headers": {
            "name": "electris.source-code.types.type",
            "match": "(?<=[^_a-zA-Z0-9$](extends |implements |with |on ))[_a-zA-Z0-9$]+[_a-zA-Z0-9$.]*\\??"
        },
        "type-definition-generic-in-class-headers": {
            "name": "electris.source-code.types.type",
            "begin": "(?<=[^_a-zA-Z0-9$](extends |implements |with |on ))[_a-zA-Z0-9$]+[_a-zA-Z0-9$.]*\\??(?=\\s*<(.*>)?)",
            "end": "(?<=>)(\\?(?!\\.))?(?<!\\s*\\()|$",
            "patterns": [
                { "include": "#type-args-list" }
            ]
        },
        "type-reference": {
            "name": "electris.source-code.types.type",
            "match": "_*[A-Z][_a-zA-Z0-9$]*(\\?(?!\\.))?(?<!\\s*\\()"
        },
        "type-reference-generic": {
            "name": "electris.source-code.types.type",
            "begin": "_*[A-Z][_a-zA-Z0-9$]*[_a-zA-Z0-9$]*(?=\\s*<.*>)",
            "end": "(?<=>)(\\?(?!\\.))?(?<!\\s*\\()",
            "patterns": [{ "include": "#type-args-list" }]
        },
        "builtin-type": {
            "name": "electris.source-code.types.type",
            "match": "(?<![_a-zA-Z0-9$.])(num|int|double|bool|void)(\\?(?!\\.))?(?![_a-zA-Z0-9$])"
        },

        "type-args-list-single-line": {
            "begin": "(?=<.*>(?<!=>)\\s*(\\(|\\{|\\[))",
            "end": "(?<=>|$)",
            "patterns": [
                { "include": "#type-args-list" }
            ]
        },
        "type-args-list": {
            "name": "electris.source-code.types.type-args",
            "begin": "(?<=[_a-zA-Z0-9$]\\s*(<\\s*)*)<|<(?=(\\s*<)*\\s*[_a-zA-Z0-9$<>(])",
            "end": ">|$",
            "patterns": [
                { "include": "#type-args-list" },
                { "include": "#type-args-keywords" },
                { "include": "#type-args-record" }
            ]
        },
        "type-args-keywords": {
            "match": "(dynamic|extends|implements)",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            }
        },
        "type-args-record": {
            "begin": "\\(",
            "end": "\\)|$|(?=>)",
            "patterns": [
                { "include": "#type-args-list" },
                { "include": "#type-definition-record-variable" },
                { "include": "#type-args-record-recursive" }
            ]
        },
        "type-args-record-recursive": {
            "name": "electris.source-code.types.type-args",
            "begin": "\\(",
            "end": "\\)|$|(?=>)",
            "patterns": [
                { "include": "#type-args-list" },
                { "include": "#type-definition-record-variable" },
                { "include": "#type-args-record-recursive" }
            ]
        },

        "function-call": {
            "name": "electris.source-code.function-call",
            "match": "[_a-zA-Z0-9$]+(?=\\s*[!?]?\\s*\\()|(?<=[^_a-zA-Z0-9$](get|set) )[_a-zA-Z0-9$]+"
        },
        "function-call-generic": {
            "name": "electris.source-code.function-call",
            "begin": "[_a-zA-Z0-9$]+(?=\\s*[!?]?\\s*<.*>\\s*\\()",
            "end": "(?<=>)(?=\\s*\\()|$",
            "patterns": [
                { "include": "#type-args-list" }
            ]
        },
        
        "scope-punctuation": {
            "begin": "(\\{)",
            "end": "(\\})",
            "beginCaptures": {
                "1": { "name": "electris.source-code.punctuation" }
            },
            "endCaptures": {
                "1": { "name": "electris.source-code.punctuation" }
            },
            "patterns": [
                { "include": "$self" }
            ]
        },
        "scope-punctuation-leftover": {
            "name": "electris.source-code.punctuation",
            "match": "\\}"
        },
        "index-punctuation": {
            "name": "electris.source-code.punctuation",
            "match": "\\[|\\]"
        },
        "expression-punctuation": {
            "name": "electris.source-code.punctuation",
            "match": "\\.|,|;|\\(|\\)"
        },
        "expression-punctuation-parentheses-not-record": {
            "comment": "tries to detect non-record pairs of parentheses, aka (...) {} expressions (should be evaluated before records)",
            "comment2": "this is a hack because (?=.*\\)) will prematurely detect close parentesis that isn't paired with the first; aka ((num, num*)* test)",
            "begin": "(?<!\\s+as\\s+)(\\()(?=.*\\)\\s*([a-zA-Z\\*]*\\s*\\{|,|$))(?!.*\\)\\s*[_a-zA-Z0-9$.]+\\s*\\()",
            "end": "(\\))",
            "beginCaptures": {
                "1": { "name": "electris.source-code.punctuation" }
            },
            "endCaptures": {
                "1": { "name": "electris.source-code.punctuation" }
            },
            "patterns": [
                { "include": "#self-no-parentheses-for-functions-that-arent-record-types" }
            ]
        },
        "case-punctuation": {
            "name": "electris.source-code.punctuation",
            "match": "(?<=case.*):"
        }
    }
}
