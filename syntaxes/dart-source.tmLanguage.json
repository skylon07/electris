{
    "fileTypes": [
        "dart"
    ],
    "scopeName": "electris.source.dart",
    "patterns": [
        {
            "precedenceGroup": "parentheses-for-functions-that-arent-record-types",
            "patterns": [
                { "include": "#expression-punctuation-parentheses-not-record" }
            ]
        },
        { "include": "#self-no-parentheses-for-functions-that-arent-record-types" }
    ],
    "repository": {
        "self-no-parentheses-for-functions-that-arent-record-types": {
            "patterns": [
                {
                    "precedenceGroup": "comments",
                    "patterns": [
                        { "include": "#single-line-doc-comment" },
                        { "include": "#single-line-comment" },
                        { "include": "#multi-line-comment" }
                    ]
                },
                {
                    "precedenceGroup": "keywords",
                    "patterns": [
                        { "include": "#keyword" },
                        { "include": "#keyword-operator" }
                    ]
                },
                {
                    "precedenceGroup": "literals",
                    "patterns": [
                        { "include": "#literal-keyword" },
                        { "include": "#literal-number" },
                        { "include": "#literal-string" },
                        { "include": "#constant-literal" }
                    ]
                },
                {
                    "precedenceGroup": "type-references",
                    "patterns": [
                        { "include": "#type-definition-collection-cast" },
                        { "include": "#type-definition-in-class-headers" },
                        { "include": "#type-definition-with-typedef" },
                        { "include": "#type-definition-after-as-or-is" },
                        { "include": "#type-definition-before-variable" },
                        { "include": "#type-identifier-after-new" },
                        { "include": "#type-identifier-generic" },
                        { "include": "#type-identifier" },
                        { "include": "#builtin-type" }
                    ]
                },
                {
                    "precedenceGroup": "function-calls",
                    "patterns": [
                        { "include": "#function-call" },
                        { "include": "#function-call-generic" }
                    ]
                },
                {
                    "precedenceGroup": "rest",
                    "patterns": [
                        { "include": "#spread-operator" },
                        { "include": "#cascade-chain" },
                        { "include": "#variable-reference" },
                        { "include": "#math-operator" },
                        { "include": "#symbol-operator" },
                        { "include": "#lambda-operator" },
                        { "include": "#case-punctuation" },
                        { "include": "#condition-operator" },
                        { "include": "#condition-operator-ternary" },
                        { "include": "#assignment-operator" },
                        { "include": "#annotation" },
                        { "include": "#scope-punctuation" },
                        { "include": "#scope-punctuation-leftover" },
                        { "include": "#index-punctuation" },
                        { "include": "#expression-punctuation" }
                    ]
                }
            ]
        },

        "cascade-chain": {
            "name": "electris.source-code.variable",
            "match": "\\.\\."
        },
        "variable-reference": {
            "name": "electris.source-code.variable",
            "match": "_*[a-zA-Z0-9$][_a-zA-Z0-9$]*|(_|__|___|____)(?![_A-Z])"
        },

        "math-operator": {
            "name": "electris.source-code.operator",
            "match": "\\+|\\-|\\+\\+|\\-\\-|\\*|/|~/|%|!|<<|>>|>>>|\\^|&|\\||~"
        },
        "symbol-operator": {
            "name": "electris.source-code.operator",
            "match": "#"
        },
        "spread-operator": {
            "name": "electris.source-code.operator",
            "match": "\\.\\.\\."
        },
        "lambda-operator": {
            "name": "electris.source-code.operator",
            "match": "=>"
        },
        "extract-operator-dollar": {
            "patterns": [
                { "include": "#extract-operator-dollar-expression" },
                { "include": "#extract-operator-dollar-variable" }
            ]
        },
        "extract-operator-dollar-variable": {
            "name": "electris.source-code.operator",
            "begin": "\\$(?=[_a-zA-Z0-9]*)",
            "end": "(?![_a-zA-Z0-9])",
            "patterns": [
                { "include": "#variable-reference" }
            ]
        },
        "extract-operator-dollar-expression": {
            "begin": "(\\$\\{)",
            "end": "(\\})",
            "beginCaptures": { 
                "1": { "name": "electris.source-code.operator" }
            },
            "endCaptures": { 
                "1": { "name": "electris.source-code.operator" }
            },
            "patterns": [
                { "include": "#scope-punctuation" },
                { "include": "$self" }
            ]
        },
        "condition-operator": {
            "name": "electris.source-code.operator",
            "match": ">|>=|<|<=|==|!=|\\?\\?|\\?(?=\\.)"
        },
        "condition-operator-ternary": {
            "name": "electris.source-code.operator",
            "match": "\\?"
        },
        "assignment-operator": {
            "name": "electris.source-code.operator",
            "match": "=|\\?\\?=|\\+=|\\-=|\\*=|/=|~/=|%=|<<=|>>=|>>>=|\\^=|&=|\\|=|~="
        },
        "keyword": {
            "patterns": [
                { "include": "#keyword-hard" },
                { "include": "#keyword-soft" },
                { "include": "#keyword-soft-type" }
            ]
        },
        "keyword-hard": {
            "name": "electris.source-code.operator",
            "match": "(?<!(?<!\\.\\.)\\.)(class|extends|with|super|is|as|enum|var|const|final|if|else|for|in|while|continue|break|do|switch|case|default|try|catch|finally|throw|rethrow|assert|this|new|return)(?![_a-zA-Z0-9$])"
        },
        "keyword-soft": {
            "name": "electris.source-code.operator",
            "comment": "This theme only supports escaping identifiers named as soft keywords for function calls/declarations -- I'm not handling every case one of these could be a variable (plus, naming identifiers even if they're *soft* keywords is a bad idea, imo)",
            "comment2": "If the keyword has a clear contextual application (like 'type' in 'extension type'), a separate `keyword-soft-...` rule can be made for it",
            "match": "(?<!\\.)(import|export|library|hide|show|deferred|part|macro|abstract|interface|implements|mixin|base|sealed|typedef|extension|dynamic|static|covariant|late|when|on|async|await|sync|get|set|yield|external|required|factory)(?![_a-zA-Z0-9$])(?![(]|<)"
        },
        "keyword-soft-type": {
            "name": "electris.source-code.operator",
            "match": "(?<=(^|[^_a-zA-Z0-9$.])extension\\s+)type"
        },
        "keyword-operator": {
            "name": "electris.source-code.operator",
            "match": "operator\\s*(>|>=|<|<=|==|\\+|\\-|\\*|/|~/|%|<<|>>|\\^|&|\\||~|>>>|\\[\\]|\\[\\]=)(?=\\s*[(]|\\s*$)|operator\\s*([^(\\s]+|$)",
            "captures": {
                "1": { "name": "electris.source-code.function-call" },
                "2": { "name": "electris.source-code.escape" }
            }
        },
        "annotation": {
            "name": "electris.source-code.operator",
            "match": "@[_a-zA-Z0-9$.]*"
        },

        "literal-number": {
            "name": "electris.source-code.primitive-literal",
            "match": "0[xX][0-9a-fA-F]*|[0-9]+(\\.[0-9]+)?([eE][+-]?[0-9]+)?|\\.[0-9]+([eE][+-]?[0-9]+)?"
        },
        "literal-string": {
            "patterns": [
                { "include": "#literal-raw-string-tdquote" },
                { "include": "#literal-raw-string-tsquote" },
                { "include": "#literal-raw-string-dquote" },
                { "include": "#literal-raw-string-squote" },
                { "include": "#literal-string-tdquote" },
                { "include": "#literal-string-tsquote" },
                { "include": "#literal-string-dquote" },
                { "include": "#literal-string-squote" }
            ]
        },
        "literal-string-dquote": {
            "name": "electris.source-code.primitive-literal",
            "begin": "(?<!(?<!\\\\)\\\\)\"",
            "end": "(?<!(?<!\\\\)\\\\)\"|$",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            },
            "patterns": [
                { "include": "#extract-operator-dollar" },
                { "include": "#literal-string-escape" }
            ]
        },
        "literal-string-squote": {
            "name": "electris.source-code.primitive-literal",
            "begin": "(?<!(?<!\\\\)\\\\)'",
            "end": "(?<!(?<!\\\\)\\\\)'|$",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            },
            "patterns": [
                { "include": "#extract-operator-dollar" },
                { "include": "#literal-string-escape" }
            ]
        },
        "literal-string-tdquote": {
            "name": "electris.source-code.primitive-literal",
            "begin": "(?<!(?<!\\\\)\\\\)\"\"\"",
            "end": "(?<!(?<!\\\\)\\\\)\"\"\"",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            },
            "patterns": [
                { "include": "#extract-operator-dollar" },
                { "include": "#literal-string-escape" }
            ]
        },
        "literal-string-tsquote": {
            "name": "electris.source-code.primitive-literal",
            "begin": "(?<!(?<!\\\\)\\\\)'''",
            "end": "(?<!(?<!\\\\)\\\\)'''",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            },
            "patterns": [
                { "include": "#extract-operator-dollar" },
                { "include": "#literal-string-escape" }
            ]
        },
        "literal-raw-string-dquote": {
            "name": "electris.source-code.primitive-literal",
            "begin": "(?<!(?<!\\\\)\\\\)r\"",
            "end": "\"|$",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            }
        },
        "literal-raw-string-squote": {
            "name": "electris.source-code.primitive-literal",
            "begin": "(?<!(?<!\\\\)\\\\)r'",
            "end": "'|$",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            }
        },
        "literal-raw-string-tdquote": {
            "name": "electris.source-code.primitive-literal",
            "begin": "(?<!(?<!\\\\)\\\\)r\"\"\"",
            "end": "\"\"\"",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            }
        },
        "literal-raw-string-tsquote": {
            "name": "electris.source-code.primitive-literal",
            "begin": "(?<!(?<!\\\\)\\\\)r'''",
            "end": "'''",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            }
        },
        "literal-keyword": {
            "name": "electris.source-code.primitive-literal",
            "match": "(true|false|null)(?![_a-zA-Z0-9$])"
        },
        "literal-string-escape": {
            "name": "electris.source-code.escape",
            "match": "\\\\x[0-9a-fA-F]{0,2}|\\\\u\\{[0-9a-fA-F]*\\}|\\\\u[0-9a-fA-F]{0,4}|\\\\.?"
        },
        "constant-literal": {
            "name": "electris.source-code.primitive-literal",
            "match": "_*[A-Z][_A-Z][_A-Z0-9]*(?![_a-zA-Z0-9$])"
        },

        "single-line-comment": {
            "name": "electris.source-code.comment",
            "match": "//.*"
        },
        "single-line-doc-comment": {
            "name": "electris.source-code.documentation",
            "match": "///.*"
        },
        "multi-line-comment": {
            "name": "electris.source-code.comment",
            "begin": "/\\*",
            "end": "\\*/",
            "patterns": [{ "include": "#multi-line-comment" }]
        },

        "builtin-type": {
            "name": "electris.source-code.types.type",
            "match": "(?<![.])(num|int|double|bool|void)(\\?(?!\\.))?(?![_a-zA-Z0-9$])"
        },
        "type-identifier": {
            "name": "electris.source-code.types.type",
            "match": "_*[A-Z][_a-zA-Z0-9$]*(\\?(?!\\.))?",
            "copiedBy": "#type-definition-identifier"
        },
        "type-identifier-generic": {
            "name": "electris.source-code.types.type",
            "begin": "_*[A-Z][_a-zA-Z0-9$]*(?=\\s*<[^+\\-*\\/^|&~=]*>)",
            "end": "(?<=>)(\\?(?!\\.))?|$",
            "patterns": [
                { "include": "#type-recursive-generic-params" }
            ],
            "copiedBy": "#type-definition-identifier-generic"
        },
        "type-identifier-after-new": {
            "name": "electris.source-code.types.type",
            "begin": "(?<=[^_a-zA-Z0-9$]new\\s+([_a-zA-Z0-9$]*\\.)*)(?=[_a-zA-Z0-9$])(?![_a-zA-Z0-9$]+\\.)",
            "end": "(?<=[_a-zA-Z0-9$])(?![_a-zA-Z0-9$]|<)|(?<=>)|$",
            "patterns": [
                { "include": "#type-recursive-generic-params" }
            ]
        },

        "type-definition-before-variable": {
            "name": "electris.source-code.types.type",
            "patterns": [
                {
                    "begin": "(?<=(^|[(\\[{]|,)\\s*((?<=^|[^_a-zA-Z0-9$])(var|final|const|dynamic|covariant|static)\\s+)*)(?=[_a-zA-Z0-9$]+(\\.[_a-zA-Z0-9$]*)*\\??(?=\\s*(?<=(\\?|\\s))(?!(is|as|in|if|else|for|while|switch|case|when|on)(?![_a-zA-Z0-9$]))[_a-zA-Z0-9$]{2}))",
                    "beginBasedOn": "#type-definition-identifier:match",
                    "end": "(?<=[_a-zA-Z0-9$]|\\.)(?=\\s)|(?<=\\?)|$",
                    "patterns": [ { "include": "#type-definition-identifier" } ]
                },
                {
                    "begin": "(?<=(^|[(\\[{]|,)\\s*((?<=^|[^_a-zA-Z0-9$])(var|final|const|dynamic|covariant|static)\\s+)*)(?=[_a-zA-Z0-9$]+(\\.[_a-zA-Z0-9$]*)*(?=\\s*<[^+\\-*\\/^|&~=]*>\\??\\s*[_a-zA-Z0-9$])(?!\\s*<[^+\\-*\\/^|&~=]*>\\s*[_a-zA-Z0-9$]*\\s*([)]|[+\\-*\\/^|&~=])))",
                    "beginBasedOn": "#type-definition-identifier-generic:begin",
                    "end": "(?<=>|\\?)|$",
                    "patterns": [ { "include": "#type-definition-identifier-generic" } ]
                },
                {
                    "begin": "(?<=(^|[(\\[{]|,)\\s*((?<=^|[^_a-zA-Z0-9$])(var|final|const|dynamic|covariant|static)\\s+)*)(?=[(](?=[^+\\-*\\/^|&~=]*[)]\\??\\s*(?!(is|as|in|if|else|for|while|switch|case|when|on)(?![_a-zA-Z0-9$]))[_a-zA-Z0-9$]{2}))",
                    "beginBasedOn": "#type-definition-record:begin",
                    "end": "(?<=[)]|\\?)|$",
                    "patterns": [ { "include": "#type-definition-record-top" } ]
                },
                {
                    "beginNote": "restrictions on 'begin' are different so you can chain `void Function(...) Function(...) ...`",
                    "begin": "(?<=(^|[(\\[{]|,|([_a-zA-Z0-9$]|[)]|>)\\??)\\s*((?<=^|[^_a-zA-Z0-9$])(var|final|const|dynamic|covariant|static)\\s+)*)(?=(?<=^|[^_a-zA-Z0-9$])Function(?=(\\s*<[^+\\-*\\/^|&~=]*>)?\\s*[(].*[)]\\??\\s*[_a-zA-Z0-9$]))",
                    "beginBasedOn": "#type-definition-function:begin",
                    "end": "(?<=[)]|\\?)|$",
                    "patterns": [ { "include": "#type-definition-function-top" } ]
                }
            ]
        },
        "type-definition-after-as-or-is": {
            "begin": "((?<=(^|[^_a-zA-Z0-9$])as\\s+)(?<!import\\s+.*\\s+as\\s)|(?<=(^|[^_a-zA-Z0-9$])is\\s+))(?=\\s*([_a-zA-Z0-9$]|[(]))",
            "end": "(?<=[_a-zA-Z0-9$]|\\.|\\?|>|[)])(?![^_a-zA-Z0-9$]Function[^_a-zA-Z0-9$])",
            "patterns": [
                { "include": "#type-definition" }
            ]
        },
        "type-definition-with-typedef": {
            "patterns": [
                { "include": "#type-definition-with-typedef-left-hand-side" },
                { "include": "#type-definition-with-typedef-right-hand-side" }
            ]
        },
        "type-definition-with-typedef-left-hand-side": {
            "begin": "(?<=(^|[^_a-zA-Z0-9$])typedef\\s+)(?=\\s*([_a-zA-Z0-9$]|[(]))",
            "end": "(?<=[_a-zA-Z0-9$]|\\.|\\?|>|[)])(?![^_a-zA-Z0-9$]Function[^_a-zA-Z0-9$])",
            "patterns": [
                { "include": "#type-definition" }
            ]
        },
        "type-definition-with-typedef-right-hand-side": {
            "begin": "(?<=(^|[^_a-zA-Z0-9$])typedef\\s+.*=)(?!;)",
            "end": "(?=;|$)",
            "patterns": [
                { "include": "#type-definition" },
                { "include": "#condition-operator" }
            ]
        },
        "type-definition-in-class-headers": {
            "begin": "(?<=(^|[^_a-zA-Z0-9$])(class\\s|extends\\s|implements\\s|with\\s|on\\s))(?=\\s*([_a-zA-Z0-9$]|[(]))",
            "end": "(?<=\\{)\\s*$|(?=\\{)|(?<=[_a-zA-Z0-9$]|\\.|\\?|>|[)])(?![^_a-zA-Z0-9$]Function[^_a-zA-Z0-9$])",
            "patterns": [
                { "include": "#type-definition" }
            ]
        },
        "type-definition-collection-cast": {
            "begin": "(?=<[^+\\-*\\/^|&~=]*>(?<!=>)\\s*(\\{|\\[|\\())",
            "comment": "paren branch is for generic anonymous functions like `<T> () {}`",
            "end": "(?<=>)|$",
            "patterns": [
                { "include": "#type-recursive-generic-params" }
            ]
        },

        "type-definition": {
            "patterns": [
                { "include": "#type-definition-function-top" },
                { "include": "#type-definition-record-top" },
                { "include": "#type-definition-identifier-generic" },
                { "include": "#type-definition-identifier" }
            ]
        },
        "type-definition-identifier": {
            "name": "electris.source-code.types.type",
            "match": "[_a-zA-Z0-9$]+(\\.[_a-zA-Z0-9$]*)*\\??",
            "matchDependedBy": "#type-definition-before-variable",
            "copiedFrom": "#type-identifier"
        },
        "type-definition-identifier-generic": {
            "name": "electris.source-code.types.type",
            "begin": "[_a-zA-Z0-9$]+(\\.[_a-zA-Z0-9$]*)*(?=\\s*<[^+\\-*\\/^|&~=]*>\\??)",
            "beginDependedBy": "#type-definition-before-variable",
            "end": "(?<=>)\\??|$",
            "patterns": [
                { "include": "#type-recursive-generic-params" }
            ],
            "copiedFrom": "#type-identifier-generic"
        },
        "type-definition-record-top": {
            "name": "electris.source-code.types.type",
            "begin": "(?=[(])",
            "end": "(?<=[)]|\\?)|$",
            "begin-end-sameAs": "#type-recursive-definition-record",
            "patterns": [
                { "include": "#type-definition-record" }
            ]
        },
        "type-definition-record": {
            "no-name": "to allow both regular and recursive `name`s",
            "begin": "[(](?=[^+\\-*\\/^|&~=]*[)]\\??)",
            "beginDependedBy": "#type-definition-before-variable",
            "end": "[)]\\??|$",
            "patterns": [
                { "include": "#type-definition-record-variable" },
                { "include": "#type-recursive" }
            ]
        },
        "type-definition-record-variable": {
            "name": "electris.source-code.variable",
            "match": "(?<=[_a-zA-Z0-9$]\\s|[)]|>)\\s*(?!Function)[_a-zA-Z0-9$]+"
        },
        "type-definition-function-top": {
            "name": "electris.source-code.types.type",
            "begin": "(?<=^|[^_a-zA-Z0-9$])(?=Function(\\s*<[^+\\-*\\/^|&~=]*>)?\\s*[(])",
            "end": "(?<=[)]|\\?|>|Function)|$",
            "begin-end-sameAs": "#type-recursive-definition-function",
            "patterns": [
                { "include": "#type-definition-function" }
            ]
        },
        "type-definition-function": {
            "no-name": "to allow both regular and recursive `name`s",
            "begin": "(?<=^|[^_a-zA-Z0-9$])Function(?=(\\s*<[^+\\-*\\/^|&~=]*>)?\\s*[(].*[)]\\??)",
            "beginDependedBy": "#type-definition-before-variable",
            "end": "(?<=[)]\\??)|$",
            "patterns": [
                { "include": "#type-definition-record-variable" },
                { "include": "#type-definition-record", "reason": "not recursive because fn args are same level as `Function`" },
                { "include": "#type-recursive" }
            ]
        },

        "type-recursive": {
            "patterns": [
                { "include": "#type-recursive-keywords" },
                { "include": "#type-recursive-generic-params" },
                { "include": "#type-recursive-definition-record" },
                { "include": "#type-recursive-definition-function" }
            ]
        },
        "type-recursive-keywords": {
            "name": "electris.source-code.operator",
            "match": "dynamic|extends"
        },
        "type-recursive-generic-params": {
            "name": "electris.source-code.types.type-recursive",
            "begin": "<",
            "end": ">|$",
            "patterns": [
                { "include": "#type-definition-record", "reason": "not recursive to avoid excessive shading" },
                { "include": "#type-recursive" }
            ]
        },
        "type-recursive-definition-record": {
            "name": "electris.source-code.types.type-recursive",
            "begin": "(?=[(])",
            "end": "(?<=[)]|\\?)|$",
            "begin-end-sameAs": "#type-definition-record-top",
            "patterns": [
                { "include": "#type-definition-record" }
            ]
        },
        "type-recursive-definition-function": {
            "noNameBecause": "Recursive scoping is handled by the recursive record; `Function` itself should stay at the same level",
            "begin": "(?<=^|[^_a-zA-Z0-9$])(?=Function(\\s*<[^+\\-*\\/^|&~=]*>)?\\s*[(])",
            "end": "(?<=[)]|\\?|>|Function)|$",
            "begin-end-sameAs": "#type-definition-function-top",
            "patterns": [
                { "include": "#type-definition-function" }
            ]
        },

        "function-call": {
            "name": "electris.source-code.function-call",
            "match": "(?<![^_a-zA-Z0-9$]get\\s+)(?<![^_a-zA-Z0-9$]set\\s+)[_a-zA-Z0-9$]+(?=\\s*!?\\s*[(])"
        },
        "function-call-generic": {
            "name": "electris.source-code.function-call",
            "begin": "[_a-zA-Z0-9$]+(?=\\s*!?\\s*<[^+\\-*\\/^|&~=]*>\\s*[(])",
            "end": "(?<=>)(?=\\s*[(])|$",
            "patterns": [
                { "include": "#type-recursive-generic-params" },
                { "match": "!", "name": "electris.source-code.operator" }
            ]
        },
        
        "scope-punctuation": {
            "begin": "(\\{)",
            "end": "(\\})",
            "beginCaptures": {
                "1": { "name": "electris.source-code.punctuation" }
            },
            "endCaptures": {
                "1": { "name": "electris.source-code.punctuation" }
            },
            "patterns": [
                { "include": "$self" }
            ]
        },
        "scope-punctuation-leftover": {
            "name": "electris.source-code.punctuation",
            "match": "\\}"
        },
        "index-punctuation": {
            "name": "electris.source-code.punctuation",
            "match": "\\[|\\]"
        },
        "expression-punctuation": {
            "name": "electris.source-code.punctuation",
            "match": "\\.|,|:|;|[(]|[)]"
        },
        "expression-punctuation-parentheses-not-record": {
            "comment": "tries to detect non-record pairs of parentheses, aka (...) {} expressions (should be evaluated before records)",
            "comment2": "this is a hack because (?=.*[)]) will prematurely detect close parentesis that isn't paired with the first; aka ((num, num*)* test)",
            "SUPER-help-because-this-is-crazy": "  __lambda_close__                                                                                                                   __fn_call_type_params_end__                                                                                                 __record_end__                                                                                                                          ",
            "help-because-this-is-crazy": "         (?<!___^___)(?=(?<!(?<!__fn_return_type_____fn_def_name___)___fn_call_end!___)(?<!(?<!__fn_return_type_____fn_def_name______type_params_start__)__^__)|__(?<!____`.then(() {`-like_____)____fn_def_body_bracket____)MATCH(?!(?<=_______record_return_start_______)___^___(_________fn_definition_________________________|_____get/set_definition________))(?=MATCH_______mods___________lambda_end__)",
            "begin": "(?<!\\s+as\\s+)(?<!\\s+is\\s+)(?<!\\}\\s*)(?=(?<!(?<![.>)?_a-zA-Z0-9$]\\s+[_a-zA-Z0-9$]*)[_a-zA-Z0-9$!]\\s*)(?<!(?<![.>)?_a-zA-Z0-9$]\\s+[_a-zA-Z0-9$]+\\s*<[^+\\-*\\/^|&~=]*)>\\s*)|.*(?<!\\.[_a-zA-Z0-9$!]+[(]{2,}.*)[)]\\s*\\{(?:\\s*\\})?\\s*$)([(])(?!(?<!(?<!^\\s*)(?<!^\\s*static\\s*)[(]).*[)].*([_a-zA-Z0-9$]+\\s*(<[^+\\-*\\/^|&~=]*>)?\\s*[(]|(get|set)\\s*[_a-zA-Z0-9$]+\\s*))(?=.*[)]\\s*(a?sync\\*?)?\\s*(\\{|=>?|;|$))",
            "end": "([)])",
            "beginCaptures": {
                "1": { "name": "electris.source-code.punctuation" }
            },
            "endCaptures": {
                "1": { "name": "electris.source-code.punctuation" }
            },
            "patterns": [
                { "include": "#self-no-parentheses-for-functions-that-arent-record-types" }
            ],
            "casesToConsider": [
                "type       fn      ((rec, rec) id) {",
                "type<type> fn      ((rec, rec) id) {",
                "type       fn<type>((rec, rec) id) {",
                "type<type> fn<type>((rec, rec) id) {",
                "   ",
                "var fn = ((rec, rec) id) =>",
                "var fn = ((rec, rec) id) {",
                "var fn = (((rec, rec), rec) id) =>",
                "var fn = (((rec, rec), rec) id) {",
                "var fn = (void Function() id) =>",
                "var fn = (void Function() id) {",
                "var fn = (void Function() fn()) =>",
                "var fn = (void Function() fn()) {",
                "var fn = (void Function() fn(), id) =>",
                "var fn = (void Function() fn(), id) {",
                "   ",
                "(void Function() id) =>",
                "(void Function() id) {",
                "// no way to tell these aren't `(rec, rec) funcDef() {`, but seeing these without previous text would be unusual...",
                "(void Function() fn()) =>",
                "(void Function() fn()) {",
                "(void Function() fn(), asdf) =>",
                "(void Function() fn(), asdf) {",
                "   ",
                "(rec, rec)  syn",
                "(rec, rec)  asyn",
                "(rec, rec)? syn",
                "(rec, rec)? asyn",
                "(id, id)    sync",
                "(id, id)    async",
                "(rec, rec)? sync",
                "(rec, rec)? async",
                "   ",
                "class MyClass {",
                "         (type, type)      get something                      => (5, 5);",
                "         (type, type)      set something((rec, rec) newThing) => (5, 5);",
                "  void Function((int, int))       makeCb()                    => ((int, int) test) {};",
                "  void Function((int, int))       makeCb()              { return ((int, int) test) {}; }",
                "         type                   fn      (((rec, rec), rec) id) {}",
                "         type<type>             fn      (((rec, rec), rec) id) {}",
                "         type                   fn<type>(((rec, rec), rec) id) {}",
                "         type<type>             fn<type>(((rec, rec), rec) id) {}",
                "         (type, type)           fn      (((rec, rec), rec) id) {}",
                "         (type, type)           fn<type>(((rec, rec), rec) id) {}",
                "         ((type,), type)        fn      (((rec, rec), rec) id) {}",
                "         (type, (type, type))   fn<type>(((rec, rec), rec) id) {}",
                "  static (type, type)      get something                      => (5, 5);",
                "  static (type, type)      set something((rec, rec) newThing) => (5, 5);",
                "  static type                   fn      (((rec, rec), rec) id) {}",
                "  static type<type>             fn      (((rec, rec), rec) id) {}",
                "  static type                   fn<type>(((rec, rec), rec) id) {}",
                "  static type<type>             fn<type>(((rec, rec), rec) id) {}",
                "  static (type, type)           fn      (((rec, rec), rec) id) {}",
                "  static (type, type)           fn<type>(((rec, rec), rec) id) {}",
                "  static ((type,), type)        fn      (((rec, rec), rec) id) {}",
                "  static (type, (type, type))   fn<type>(((rec, rec), rec) id) {}",
                "}",
                "   ",
                "fn      (((rec, rec), rec) id) {",
                "fn      ((( id,  id),  id))",
                "fn<type>(((rec, rec), rec) id) {",
                "fn<type>((( id,  id),  id))",
                "   ",
                "fn      (    (id, id), id)",
                "fn<type>(    (id, id), id)",
                "fn      (id, (id, id), id)",
                "fn<type>(id, (id, id), id)",
                "   ",
                "fn      ( fn( (     id ,      id ) ), ((rec, rec) id) {return id} )",
                "fn<type>( fn( (     id ,      id ) ), ((rec, rec) id) {return id} )",
                "fn      ( fn( ((id, id), (id, id)) ), ((rec, rec) id) {return id} )",
                "fn<type>( fn( ((id, id), (id, id)) ), ((rec, rec) id) {return id} )",
                "   ",
                "fn       ( ((rec, rec) id) { return id },      id )",
                "fn <type>( ((rec, rec) id) { return id },      id )",
                "fn       ( ((rec, rec) id) { return id }, (id, id))",
                "fn <type>( ((rec, rec) id) { return id }, (id, id))",
                "fn!      ( ((rec, rec) id) { return id },      id )",
                "fn!<type>( ((rec, rec) id) { return id },      id )",
                "fn!      ( ((rec, rec) id) { return id }, (id, id))",
                "fn!<type>( ((rec, rec) id) { return id }, (id, id))",
                "fn       ( ((rec, rec) id) { return id },      id ).then(() {",
                "fn <type>( ((rec, rec) id) { return id },      id ).then(() {",
                "fn!      ( ((rec, rec) id) { return id },      id ).then(() {",
                "fn!<type>( ((rec, rec) id) { return id },      id ).then(() {",
                "   ",
                "fn      (      id            , ((rec, rec) id) { return id } )",
                "fn<type>(      id            , ((rec, rec) id) { return id } )",
                "fn      ((     id ,      id ), ((rec, rec) id) { return id } )",
                "fn<type>((     id ,      id ), ((rec, rec) id) { return id } )",
                "fn      (((id, id), (id, id)), ((rec, rec) id) { return id } )",
                "fn<type>(((id, id), (id, id)), ((rec, rec) id) { return id } )",
                "   ",
                "fn      ( ((      rec ,       rec ) id) { return id }, ((rec, rec) id) { return id } )",
                "fn<type>( ((      rec ,       rec ) id) { return id }, ((rec, rec) id) { return id } )",
                "fn      ( (((rec, rec),       rec ) id) { return id }, ((rec, rec) id) { return id } )",
                "fn<type>( (((rec, rec),       rec ) id) { return id }, ((rec, rec) id) { return id } )",
                "fn      ( (((rec, rec), (rec, rec)) id) { return id }, ((rec, rec) id) { return id } )",
                "fn<type>( (((rec, rec), (rec, rec)) id) { return id }, ((rec, rec) id) { return id } )",
                "   ",
                "fn      ( ((      rec ,       rec ) id) { return id }( (     id ,      id ) ), ((rec, rec) id) { return id } )",
                "fn<type>( ((      rec ,       rec ) id) { return id }( (     id ,      id ) ), ((rec, rec) id) { return id } )",
                "fn      ( (((rec, rec),       rec ) id) { return id }( ((id, id),      id ) ), ((rec, rec) id) { return id } )",
                "fn<type>( (((rec, rec),       rec ) id) { return id }( ((id, id),      id ) ), ((rec, rec) id) { return id } )",
                "fn      ( (((rec, rec), (rec, rec)) id) { return id }( ((id, id), (id, id)) ), ((rec, rec) id) { return id } )",
                "fn<type>( (((rec, rec), (rec, rec)) id) { return id }( ((id, id), (id, id)) ), ((rec, rec) id) { return id } )",
                "   "
            ]
        }
    }
}
