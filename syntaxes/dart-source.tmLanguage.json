{
    "fileTypes": [
        "dart"
    ],
    "scopeName": "electris.source.dart",
    "patterns": [
        {
            "precedenceGroup": "comments",
            "patterns": [
                { "include": "#single-line-comment" },
                { "include": "#multi-line-comment" }
            ]
        },
        {
            "precedenceGroup": "builtin-keywords",
            "patterns": [
                { "include": "#builtin-type" },
                { "include": "#keyword" },
                { "include": "#keyword-operator" }
            ]
        },
        {
            "precedenceGroup": "extraction-operators",
            "patterns": [
                { "include": "#extract-operator" },
                { "include": "#extract-operator-dollar" }
            ]
        },
        {
            "precedenceGroup": "literals",
            "patterns": [
                { "include": "#literal-keyword" },
                { "include": "#literal-number" },
                { "include": "#literal-string" },
                { "include": "#constant-literal" }
            ]
        },
        {
            "precedenceGroup": "type-references",
            "patterns": [
                { "include": "#type-reference-generic" },
                { "include": "#type-reference" },
                { "include": "#type-args-list" }
            ]
        },
        {
            "precedenceGroup": "function-calls",
            "patterns": [
                { "include": "#function-call" }
            ]
        },
        {
            "precedenceGroup": "rest",
            "patterns": [
                { "include": "#cascade-chain" },
                { "include": "#variable-reference" },
                { "include": "#math-operator" },
                { "include": "#condition-operator" },
                { "include": "#condition-operator-ternary" },
                { "include": "#assignment-operator" },
                { "include": "#annotation" },
                { "include": "#scope-punctuation" },
                { "include": "#index-punctuation" },
                { "include": "#expression-punctuation" }
            ]
        }
    ],
    "repository": {
        "cascade-chain": {
            "name": "electris.source-code.variable",
            "match": "\\.\\."
        },
        "variable-reference": {
            "name": "electris.source-code.variable",
            "match": "_*[a-zA-Z0-9][_a-zA-Z0-9]*|(_|__|___|____)(?![_A-Z])"
        },

        "math-operator": {
            "name": "electris.source-code.operator",
            "match": "\\+|\\-|\\+\\+|\\-\\-|\\*|/|~/|%|!|<<|>>|>>>|\\^|&|\\||~"
        },
        "extract-operator": {
            "name": "electris.source-code.operator",
            "match": "#|\\.\\.\\.|=>"
        },
        "extract-operator-dollar": {
            "patterns": [
                { "include": "#extract-operator-dollar-expression" },
                { "include": "#extract-operator-dollar-variable" }
            ]
        },
        "extract-operator-dollar-variable": {
            "name": "electris.source-code.operator",
            "match": "\\$([_a-zA-Z0-9]*)",
            "captures": {
                "1": { "name": "electris.source-code.variable" }
            }
        },
        "extract-operator-dollar-expression": {
            "begin": "(\\$\\{)",
            "end": "(\\})",
            "beginCaptures": { 
                "1": { "name": "electris.source-code.operator" }
            },
            "endCaptures": { 
                "1": { "name": "electris.source-code.operator" }
            },
            "patterns": [{ "include": "$self" }]
        },
        "condition-operator": {
            "name": "electris.source-code.operator",
            "match": ">|>=|<|<=|==|!=|\\?\\?|\\?(?=\\.)"
        },
        "condition-operator-ternary": {
            "name": "electris.source-code.operator",
            "match": "\\?|:"
        },
        "assignment-operator": {
            "name": "electris.source-code.operator",
            "match": "=|\\?\\?=|\\+=|\\-=|\\*=|/=|~/=|%=|<<=|>>=|>>>=|\\^=|&=|\\|=|~="
        },
        "keyword": {
            "name": "electris.source-code.operator",
            "match": "(import|export|library|hide|show|deferred|part|class|macro|extends|abstract|interface|implements|mixin|with|super|is|as|enum|typedef|extension|var|const|final|dynamic|static|covariant|late|if|else|for|in|while|continue|break|do|switch|case|default|try|on|catch|finally|throw|rethrow|assert|async|await|sync|this|new|get|set|void|return|yield|external|required|factory)(?![_a-zA-Z0-9])"
        },
        "keyword-operator": {
            "name": "electris.source-code.operator",
            "match": "operator\\s*(>|>=|<|<=|==|\\+|\\-|\\*|/|~/|%|<<|>>|\\^|&|\\||~|>>>|\\[\\]|\\[\\]=)(?=\\s*\\()|operator\\s*([^\\(]*)",
            "captures": {
                "2": { "name": "electris.source-code.punctuation" }
            }
        },
        "annotation": {
            "name": "electris.source-code.operator",
            "match": "@[_a-zA-Z0-9.]*"
        },

        "literal-number": {
            "name": "electris.source-code.primitive-literal",
            "match": "0[xX][0-9a-fA-F]+|[0-9]+(\\.[0-9]*)?(e[0-9]+)?|\\.[0-9]+(e[0-9]+)?"
        },
        "literal-string": {
            "patterns": [
                { "include": "#literal-string-tdquote" },
                { "include": "#literal-string-tsquote" },
                { "include": "#literal-string-dquote" },
                { "include": "#literal-string-squote" }
            ]
        },
        "literal-string-dquote": {
            "name": "electris.source-code.primitive-literal",
            "begin": "(?<!(?<!\\\\)\\\\)(r?)\"",
            "end": "(?<!(?<!\\\\)\\\\)\"",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            },
            "patterns": [
                { "include": "#extract-operator-dollar" },
                { "include": "#literal-string-escape" }
            ]
        },
        "literal-string-squote": {
            "name": "electris.source-code.primitive-literal",
            "begin": "(?<!(?<!\\\\)\\\\)(r?)'",
            "end": "(?<!(?<!\\\\)\\\\)'",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            },
            "patterns": [
                { "include": "#extract-operator-dollar" },
                { "include": "#literal-string-escape" }
            ]
        },
        "literal-string-tdquote": {
            "name": "electris.source-code.primitive-literal",
            "begin": "(?<!(?<!\\\\)\\\\)(r?)\"\"\"",
            "end": "(?<!(?<!\\\\)\\\\)\"\"\"",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            },
            "patterns": [
                { "include": "#extract-operator-dollar" },
                { "include": "#literal-string-escape" }
            ]
        },
        "literal-string-tsquote": {
            "name": "electris.source-code.primitive-literal",
            "begin": "(?<!(?<!\\\\)\\\\)(r?)'''",
            "end": "(?<!(?<!\\\\)\\\\)'''",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            },
            "patterns": [
                { "include": "#extract-operator-dollar" },
                { "include": "#literal-string-escape" }
            ]
        },
        "literal-keyword": {
            "name": "electris.source-code.primitive-literal",
            "match": "(true|false|null)(?![_a-zA-Z0-9])"
        },
        "literal-string-escape": {
            "name": "electris.source-code.escape",
            "match": "\\\\x[0-9a-fA-F]{0,2}|\\\\u\\{[0-9a-fA-F]*\\}|\\\\u[0-9a-fA-F]{0,4}|\\\\."
        },
        "constant-literal": {
            "name": "electris.source-code.primitive-literal",
            "match": "_*[A-Z][A-Z0-9]*(?![a-z])"
        },

        "single-line-comment": {
            "name": "electris.source-code.comment",
            "match": "//.*|///.*"
        },
        "multi-line-comment": {
            "name": "electris.source-code.comment",
            "begin": "/\\*",
            "end": "\\*/",
            "patterns": [{ "include": "#multi-line-comment" }]
        },

        "type-reference": {
            "name": "electris.source-code.types.type",
            "match": "_*[A-Z][_A-Z0-9]*[a-z][_a-zA-Z0-9]*(\\?(?!\\.))?(?<!\\s*\\()"
        },
        "type-reference-generic": {
            "name": "electris.source-code.types.type",
            "begin": "_*[A-Z][_A-Z0-9]*[a-z][_a-zA-Z0-9]*(?=<)",
            "end": "(?<=>)(\\?(?!\\.))?(?<!\\s*\\()",
            "patterns": [{ "include": "#type-args-list" }]
        },
        "builtin-type": {
            "name": "electris.source-code.types.type",
            "match": "(num|int|double|bool)(?![_a-zA-Z0-9])"
        },

        "type-args-list": {
            "name": "electris.source-code.types.type-args",
            "begin": "(?<=[_a-zA-Z0-9]<*)<|<(?=<*[_a-zA-Z0-9])",
            "end": ">",
            "patterns": [
                { "include": "#type-args-list" },
                { "include": "#type-args-keywords" }
            ]
        },
        "type-args-keywords": {
            "match": "(dynamic|extends|implements)",
            "captures": {
                "1": { "name": "electris.source-code.operator" }
            }
        },

        "function-call": {
            "name": "electris.source-code.function-call",
            "match": "[_a-zA-Z0-9]+(?=\\s*?[!?]?(<.*>)?\\()"
        },

        "scope-punctuation": {
            "name": "electris.source-code.punctuation",
            "match": "\\{|\\}"
        },
        "index-punctuation": {
            "name": "electris.source-code.punctuation",
            "match": "\\[|\\]"
        },
        "expression-punctuation": {
            "name": "electris.source-code.punctuation",
            "match": "\\.|,|;|\\(|\\)"
        }
    }
}
